--
--	Grail NPCs
--	Written by scott@mithrandir.com
--
--	Version History
--		Stopped keeping history as it was not maintained.
--
--	Each NPC value is a table that can contain:
--		[1]	code information (see below) like map location
--		[2] optional friendly notes
--		[3] optional faction association
--
--	NPC Codes
--		A:npcId			npcId that is what Blizzard returns for this alias NPC
--		Created			indicates item is created by player
--		D:<npc list>	comma separated list of NPC IDs that drop this item
--		H<holidayCode>	holidayCode is a single character indicating the holiday the NPC is available
--		K:<quest list>	comma separated list of quest IDs for which this is killed
--		Mailbox			indicates item in a mailbox (any map area)
--		Mailbox<mapId>	indicates item in a mailbox in the specified map area
--		N:npcId			npcId whose name is to be used for this NPC
--		Near			indicates the NPC is nearby (any map area)
--		Near<mapId>		indicates the NPC is nearby in the specified map area
--		Preowned		indicates item is already owned
--		Q:<quest list>	comma separated list of quest IDs to which this is associated
--		Self			special NPC indicator for Self (the player)
--		X				indicates NPC is in heroic only
--		Z<mapId>		indicates NPC found in the map area
--		anything else should be the format (without spaces):
--			mapId [mapLevel] : xx.xx , yy.yy > realMapId
--		the "[mapLevel]" is only required for maps with levels, most do not need it
--		the "> realMapId" indicates the coordinates are in a map that contains the realMap...this allows an outer map to show a point for maps that are contained within
--
--	Known issues
--
--
--	Alliance Garrison small plot top step locations:
--		18:	971:46.99,59.27
--		19:	971:50.03,57.75
--		20:	971:51.19,63.58
--	Alliance Garrison medium plot basic entrance locations:
--		22:	971:35.53,49.36
--		25: 971:51.21,47.04
--	Alliance Garrison large plot basic entrance locations:
--		23:	971:45.25,42.49
--		24:	971:40.09,56.58
--
--	Horde Garrison small plot top step locations:
--		18:	976:52.44,37.06
--		19:	976:48.38,33.59
--		20: 976:52.59,40.81
--	Horde Garrison medium plot basic entrance locations:
--		22: 976:51.43,57.39
--		25:	976:57.75,28.14
--	Horde Garrison large plot basic entrance locations:
--		23: 976:58.88,49.06
--		24: 976:60.36,36.51
--
--	Dungeon entrances:
--		Ulduar					495:41.57,17.83
--		Thunder					928:63.73,32.23
--		SM Graveyard 762[1]		20:84.87,30.61
--		SM Cathedral 762[4]		20:85.35,30.62
--		SM Library 762[2]		20:85.29,32.14
--		SM Armory 762[3]		20:85.62,31.59
--		Mechanar				479:70.59,69.73
--		Tempest Keep			479:73.73,63.74
--		Botanica				479:71.72,55.02
--		Arcatraz				479:74.37,57.74
--		Auchanai Crypts			478:34.34,65.61
--		Sethekk Halls			478:44.91,65.61
--		Shadow Labyrinth		478:39.63,73.54
--		Mana Tombs				478:39.63,57.67
--		Blood Furnace			465:46.03,51.79
--		Shattered Halls			465:47.68,51.99
--		Hellfire Ramparts		465:47.63,53.57
--		Black Temple			473:71.05,46.45
--		Grim Batol				700:19.18,54.01
--		Gate of the Setting Sun	811:15.84,74.39
--		Shado-Pan Monastery		809:36.66,47.33
--		Temple of Jade Serpent	806:56.18,57.87
--		Auchindoun				946:46.31,73.93
--		Bloodmaul Slag Mines	941:49.85,24.75
--		Zul Aman				463:82.14,64.35
--
--	UTF-8 file
--
Grail_NPCs_File_Version = 015

if Grail.npcsVersionNumber >= Grail_NPCs_File_Version then return end
Grail.npcsVersionNumber = Grail_NPCs_File_Version

local originalMem = gcinfo()

Grail.npcs = {}

local _, release, _, interface = GetBuildInfo()
release = tonumber(release)
interface = tonumber(interface)

local G = Grail.npcs

if release >= 0 then
G[54]={'1429:42.43,66.56'}
G[116]={'1429:50.8,83.8'}
G[171]={'1436:30,34'}
G[196]={'1429:48.94,40.16'}
G[197]={'1429:48.92,41.60'}
G[233]={'1436:56.04,31.23'}
G[234]={'1436:56.32,47.52'}
G[235]={'1436:56.41,30.52'}
G[237]={'1436:59.95,19.36'}
G[238]={'1436:59.92,19.41'}
G[239]={'1436:44.63,80.25'}
G[240]={'1429:42.11,65.93'}
G[241]={'1429:42.14,67.25'}
G[244]={'1429:34.66,84.48'}
G[246]={'1429:34.49,84.26'}
G[247]={'1429:43.13,85.72'}
G[248]={'1429:34.94,83.87'}
G[251]={'1429:43.15,89.62'}
G[252]={'1429:29.84,86.01'}
G[253]={'1429:43.32,65.71'}
G[255]={'1429:43.10,85.50'}
G[261]={'1429:73.97,72.19'}
G[263]={'1431:71.92,46.42'}
G[264]={'1431:73.56,46.84'}
G[265]={'1431:75.82,45.31'}
G[266]={'1433:26.55,45.33'}
G[267]={'1431:72.55,46.86'}
G[268]={'1431:72.58,47.56'}
G[270]={'1431:72.03,47.81'}
G[272]={'1431:73.88,44.11'}
G[273]={'1431:74.02,44.81'}
G[276]={'1431:79.79,48.06'}
G[278]={'1429:79.46,68.79'}
G[279]={'1453:56.19,64.61'}
G[288]={'1431:18.30,56.58'}
G[289]={'1431:28.03,31.50'}
G[294]={'1429:84.59,69.37'}
G[295]={'1429:43.77,65.81'}
G[297]={'1453:29.63,61.89'}
G[302]={'1431:81.88,59.15'}
G[311]={'1431:7.78,34.08'}
G[313]={'1429:65.27,69.86'}
G[332]={'1453:75.79,59.86'}
G[341]={'1433:32.16,48.64'}
G[342]={'1433:21.86,46.33'}
G[343]={'1433:22.68,43.85'}
G[344]={'1433:29.99,44.44'}
G[346]={'1433:26.49,43.95'}
G[349]={'1433:28.35,12.66'}
G[352]={'1453:66.28,62.13'}
G[375]={'1429:49.81,39.50'}
G[379]={'1433:26.79,44.35'}
G[381]={'1433:27.72,47.36'}
G[382]={'1433:33.39,49.08'}
G[392]={'1436:30.02,86.01'}
G[415]={'1433:30.97,47.27'}
G[459]={'1429:49.87,42.65'}
G[460]={'1426:28.65,66.14'}
G[464]={'1433:17.37,69.55'}
G[466]={'1453:63.99,75.34'}
G[467]={'1436:55.68,47.51'}
G[469]={'1434:38.04,3.01'}
G[478]={'1429:27.90,86.61'}
G[482]={'1453:60.02,64.38'}
G[491]={'1436:56.99,47.17'}
G[514]={'1429:41.71,65.55'}
G[523]={'1436:56.55,52.65'}
G[576]={'1431:73.75,47.23'}
G[633]={'1431:75.34,48.72'}
G[656]={'1453:65.43,21.19'}
G[658]={'1426:29.93,71.21'}
G[661]={'1431:75.32,49.02'}
G[663]={'1431:75.30,48.04'}
G[713]={'1426:29.71,71.25'}
G[714]={'1426:22.60,71.43'}
G[733]={'1434:38.02,3.33'}
G[738]={'1434:37.98,3.42'}
G[739]={'1434:37.83,3.56'}
G[786]={'1426:25.08,75.71'}
G[820]={'1436:56.67,47.35'}
G[821]={'1436:56.42,47.62'}
G[823]={'1429:48.16,42.95'}
G[836]={'1426:28.77,66.38'}
G[837]={'1426:28.60,66.39'}
G[840]={'1431:72.26,36.62'}
G[878]={'1436:53.98,52.97'}
G[888]={'1431:45.12,67.02'}
G[893]={'1431:7.74,33.26'}
G[895]={'1426:29.17,67.46'}
G[900]={'1433:29.70,44.26'}
G[903]={'1433:31.54,57.87'}
G[911]={'1429:50.24,42.28'}
G[912]={'1426:28.83,67.24'}
G[915]={'1429:50.32,39.92'}
G[916]={'1426:28.37,67.51'}
G[917]={'1429:43.87,65.93'}
G[926]={'1426:28.83,68.33'}
G[944]={'1426:28.71,66.37'}
G[951]={'1429:49.56,40.42'}
G[952]={'1429:49.46,41.47'}
G[963]={'1429:24.23,74.46'}
G[1070]={'1433:30.74,60.00'}
G[1073]={'1437:50.09,18.23'}
G[1089]={'1432:22.07,73.12'}
G[1090]={'1432:23.47,74.53'}
G[1091]={'1432:23.53,76.40'}
G[1092]={'1432:23.23,73.69'}
G[1093]={'1432:45.95,13.67'}
G[1105]={'1432:37.23,47.40'}
G[1139]={'1432:34.65,43.17'}
G[1154]={'1432:81.83,61.75'}
G[1156]={'1432:81.83,64.16'}
G[1187]={'1432:83.44,65.24'}
G[1212]={'1453:39.44,27.95'}
G[1217]={'1437:10.58,60.58'}
G[1229]={'1426:47.35,52.59'}
G[1239]={'1437:10.88,59.67'}
G[1242]={'1437:8.35,58.55'}
G[1243]={'1426:40.70,65.08'}
G[1252]={'1426:46.71,53.85'}
G[1254]={'1426:69.08,56.33'}
G[1265]={'1426:63.08,49.85'}
G[1266]={'1426:34.60,51.62'}
G[1267]={'1426:46.82,52.39'}
G[1268]={'1426:45.88,49.28'}
G[1269]={'1426:45.87,49.33'}
G[1274]={'1455:39.50,57.21'}
G[1323]={'1453:74.30,47.24'}
G[1340]={'1432:34.24,47.73'}
G[1342]={'1432:25.44,10.39'}
G[1343]={'1432:24.76,18.40'}
G[1344]={'1432:65.93,65.61'}
G[1345]={'1432:64.90,66.65'}
G[1356]={'1455:74.64,11.76'}
G[1373]={'1426:47.63,52.65'}
G[1374]={'1426:30.24,45.78'}
G[1375]={'1426:30.19,45.59'}
G[1376]={'1426:50.43,49.08'}
G[1377]={'1426:49.62,48.61'}
G[1378]={'1426:49.43,48.41'}
G[1379]={'1432:52.22,69.30'}
G[1416]={'1453:51.74,12.10'}
G[1427]={'1453:55.11,56.21'}
G[1428]={'1453:49.65,55.63'}
G[1429]={'1453:42.53,76.21'}
G[1431]={'1453:52.47,67.61'}
G[1432]={'1453:56.99,63.52'}
G[1440]={'1453:73.95,7.21'}
G[1444]={'1453:45.78,38.63'}
G[1646]={'1453:49.18,30.27'}
G[1694]={'1426:50.08,49.41'}
G[1872]={'1426:46.04,51.71'}
G[1959]={'1426:86.29,48.85'}
G[1960]={'1426:83.89,39.19'}
G[1963]={'1432:34.83,49.11'}
G[1965]={'1426:33.47,71.86'}
G[1977]={'1426:68.67,55.96'}
G[1992]={'1438:57.73,45.05'}
G[2057]={'1432:52.22,69.30'}
G[2077]={'1438:59.92,42.48'}
G[2078]={'1438:55.95,57.27'}
G[2079]={'1438:58.69,44.27'}
G[2080]={'1438:60.90,68.49'}
G[2081]={'1438:56.01,59.47'}
G[2082]={'1438:57.81,41.66'}
G[2083]={'1438:56.08,57.72'}
G[2093]={'1437:49.92,39.38'}
G[2094]={'1437:8.49,55.71'}
G[2104]={'1437:9.86,57.49'}
G[2107]={'1438:66.26,58.52'}
G[2111]={'1437:11.79,57.99'}
G[2150]={'1438:60.49,56.17'}
G[2151]={'1438:55.81,58.31'}
G[2207]={'1439:31.22,87.44'}
G[2616]={'1445:67.72,51.71'}
G[2911]={'1437:10.76,60.40'}
G[2912]={'1457:31.40,84.18'}
G[2913]={'1439:37.47,41.92'}
G[2917]={'1439:35.76,83.71'}
G[2930]={'1439:37.67,43.36'}
G[2980]={'1412:44.88,77.09'}
G[2981]={'1412:44.18,76.05'}
G[2982]={'1412:42.57,92.17'}
G[2991]={'1412:50.03,81.15'}
G[3060]={'1412:45.08,75.94'}
G[3085]={'1433:26.62,46.56'}
G[3143]={'1411:42.06,68.33'}
G[3145]={'1411:42.85,69.14'}
G[3154]={'1411:42.84,69.33'}
G[3188]={'1411:55.95,74.72'}
G[3194]={'1411:55.95,73.93'}
G[3209]={'1412:44.41,76.32'}
G[3287]={'1411:40.60,62.59'}
G[3304]={'1411:55.94,74.39'}
G[3391]={'1413:62.67,36.27'}
G[3442]={'1413:62.97,37.17'}
G[3446]={'1413:62.40,37.64'}
G[3453]={'1413:63.33,38.42'}
G[3514]={'1438:59.07,39.44'}
G[3515]={'1438:56.14,61.71'}
G[3516]={'1457:34.82,8.70'}
G[3517]={'1457:38.19,21.64'}
G[3519]={'1438:38.29,34.44'}
G[3567]={'1438:55.52,56.92'}
G[3568]={'1438:31.52,31.52'}
G[3583]={'1439:37.33,43.69'}
G[3584]={'1439:38.62,87.39'}
G[3585]={'1440:22.70,51.91'}
G[3593]={'1438:59.63,38.45'}
G[3594]={'1438:59.63,38.67'}
G[3595]={'1438:59.18,40.45'}
G[3596]={'1438:58.65,40.45'}
G[3597]={'1438:58.62,40.28'}
G[3601]={'1438:56.65,59.38'}
G[3602]={'1438:55.96,61.53'}
G[3616]={'1439:43.57,76.36'}
G[3639]={'1439:40.28,59.73'}
G[3644]={'1439:35.74,43.70'}
G[3649]={'1439:37.41,40.18'}
G[3650]={'1439:44.22,36.32'}
G[3657]={'1439:39.06,43.54'}
G[3661]={'1439:54.93,24.88'}
G[3663]={'1440:26.20,38.62'}
G[3665]={'1413:63.06,37.61'}
G[3666]={'1439:36.97,44.13'}
G[3691]={'1440:36.61,49.61'}
G[3692]={'1439:45.03,85.37'}
G[3693]={'1439:39.36,43.45'}
G[3694]={'1439:39.33,43.43'}
G[3701]={'1439:38.81,43.37'}
G[3702]={'1439:37.67,40.74'}
G[3838]={'1438:58.36,93.99'}
G[3845]={'1440:34.68,48.87'}
G[3846]={'1440:14.82,31.26'}
G[3847]={'1440:26.40,38.57'}
G[3848]={'1440:85.30,44.71'}
G[3880]={'1440:22.26,52.91'}
G[3885]={'1440:49.84,67.18'}
G[3891]={'1440:20.30,42.25'}
G[3894]={'1440:37.34,51.80'}
G[3897]={'1440:50.87,75.11'}
G[3901]={'1440:21.75,53.26'}
G[3916]={'1440:53.46,46.34'}
G[3920]={'1440:78.30,44.89'}
G[3945]={'1434:27.31,74.08'}
G[3994]={'1442:37.10,8.13'}
G[3996]={'1440:35.79,49.10'}
G[4048]={'1444:89.60,46.59'}
G[4077]={'1442:59.56,67.08'}
G[4078]={'1453:42.98,80.24'}
G[4079]={'1440:34.92,49.81'}
G[4080]={'1442:59.86,66.87'}
G[4081]={'1455:71.75,51.34'}
G[4146]={'1457:40.32,8.72'}
G[4200]={'1439:36.76,44.36'}
G[4201]={'1442:58.99,62.50'}
G[4217]={'1457:35.30,8.59'}
G[4241]={'1457:70.66,44.86'}
G[4455]={'1437:9.96,57.95'}
G[4456]={'1445:66.45,45.14'}
G[4921]={'1445:66.15,46.08'}
G[4959]={'1453:73.06,78.62'}
G[4960]={'1453:78.23,25.06'}
G[4961]={'1453:70.38,44.84'}
G[4962]={'1437:10.55,60.26'}
G[4982]={'1453:39.44,27.95'}
G[5082]={'1437:10.82,60.40'}
G[5144]={'1455:27.11,8.24'}
G[5413]={'1453:58.09,16.56'}
G[6031]={'1455:48.84,42.51'}
G[6034]={'1457:64.34,21.92'}
G[6114]={'1455:70.73,90.63'}
G[6286]={'1438:57.09,61.29'}
G[6301]={'1439:38.12,41.25'}
G[6569]={'1455:69.21,50.56'}
G[6577]={'1432:63.56,47.92'}
G[6579]={'1453:55.51,12.53'}
G[6667]={'1439:56.67,13.51'}
G[6736]={'1438:55.62,59.79'}
G[6774]={'1429:45.57,47.75'}
G[6780]={'1438:61.16,47.64'}
G[6782]={'1426:33.81,72.20'}
G[6786]={'1411:52.06,68.30'}
G[6806]={'1426:47.26,52.21'}
G[6946]={'1453:75.78,60.36'}
G[6966]={'1433:28.07,52.03'}
G[7313]={'1457:36.40,85.98'}
G[7316]={'1457:29.11,45.47'}
G[7317]={'1438:44.94,61.50'}
G[7944]={'1455:69.57,50.47'}
G[7950]={'1455:70.11,47.62'}
G[7999]={'1457:39.19,81.32'}
G[8026]={'1457:61.93,39.14'}
G[8416]={'1426:28.48,67.67'}
G[8583]={'1438:60.90,41.96'}
G[8584]={'1438:54.59,32.99'}
G[8962]={'1433:29.24,53.63'}
G[8965]={'1433:29.32,53.61'}
G[8997]={'1439:38.36,43.06'}
G[9296]={'1429:50.69,39.35'}
G[9796]={'1411:42.73,67.24'}
G[10118]={'1438:56.26,92.33'}
G[10176]={'1411:43.28,68.54'}
G[10216]={'1439:36.13,44.94'}
G[10219]={'1439:36.62,45.59'}
G[10616]={'1429:81.40,66.09'}
G[11218]={'1439:44.37,76.37'}
G[11219]={'1440:27.24,35.66'}
G[11378]={'1411:44.62,68.65'}
G[11711]={'1439:45.95,90.32'}
G[11802]={'1450:56.23,30.55'}
G[11806]={'1440:26.59,36.72'}
G[12738]={'1426:24.98,75.94'}
G[12997]={'947:0.00,0.00'}
G[13018]={'947:0.00,0.00'}
G[15763]={'1455:69.74,46.03'}
G[15766]={'1453:55.24,64.73'}
G[700000]={'1438:52.83,56.97 A:2151'}
G[700001]={'1432:35.62,46.69 A:1340'}
G[700003]={'1433:17.38,69.59 A:464'}
G[700004]={'1432:33.15,49.33 A:1340'}
G[1000031]={'1433:84.51,47.05'}
G[1000033]={'1436:25.97,16.91'}
G[1000034]={'1436:40.63,17.03'}
G[1000035]={'1436:25.91,47.76'}
G[1000036]={'1436:40.51,47.80'}
G[1000047]={'1433:26.75,46.47'}
G[1000055]={'1429:72.66,60.33'}
G[1000056]={'1429:79.80,55.50'}
G[1000059]={'1431:49.89,77.65'}
G[1000060]={'1433:29.62,46.18'}
G[1000061]={'1431:17.63,29.08'}
G[1000068]={'1429:24.46,74.73'}
G[1000256]={'1432:37.22,46.47'}
G[1000257]={'1432:56.19,13.27'}
G[1000270]={'1426:47.67,52.66'}
G[1001585]={'1432:50.57,14.39'}
G[1002059]={'1426:79.68,36.17'}
G[1002734]={'1437:12.07,64.08'}
G[1003643]={'1436:41.50,66.82'}
G[1004141]={'1413:52.43,11.64'}
G[1006751]={'1438:42.62,76.07'}
G[1006752]={'1438:34.70,28.69'}
G[1010076]={'1439:39.56,86.23'}
G[1012666]={'1439:38.59,86.13'}
G[1017182]={'1439:36.61,46.32'}
G[1017183]={'1439:41.96,28.70'}
G[1017184]={'1439:51.25,24.59'}
G[1017185]={'1439:41.43,80.65'}
G[1019024]={'1440:56.43,49.27'}
G[1156561]={'1429:24.58,78.24'}
G[1175226]={'1439:35.99,70.97'}
G[1175227]={'1439:32.75,80.74'}
G[1175233]={'1439:41.86,31.57'}
G[1175524]={'1439:47.31,48.74'}
G[1176190]={'1439:37.14,62.11'}
G[1176191]={'1439:31.23,85.51'}
G[1176196]={'1439:53.16,18.08'}
G[1176197]={'1439:44.21,20.71'}
G[1176198]={'1439:31.74,83.67'}
G[100001307]={'D:478 Q:123'}
G[100001357]={'D:171 Q:136'}
G[100001972]={'D:116 Q:184'}
end

local N = Grail.npc
for key, value in pairs(Grail.npcs) do
	if value[1] then
		N.locations[key] = {}
		local codeArray = { strsplit(" ", value[1]) }
		local controlCode
		for _, code in pairs(codeArray) do
			controlCode = strsub(code, 1, 1)
			if 'A' == controlCode then
				if 2 < strlen(code) and ':' == strsub(code, 2, 2) then
					local alias = tonumber(strsub(code, 3))
					if nil ~= alias then
						N.nameIndex[key] = alias
						N.aliases[alias] = N.aliases[alias] or {}
						tinsert(N.aliases[alias], key)
					else
						print("*** NPC processing of",key,"has improper alias")
					end
				end
			elseif 'C' == controlCode then
				tinsert(N.locations[key], { created = true })
			elseif 'D' == controlCode then
				if 2 < strlen(code) and ':' == strsub(code, 2, 2) then
					N.droppedBy[key] = N.droppedBy[key] or {}
					local npcIds = { strsplit(',', strsub(code, 3)) }
					for _, anNPCId in pairs(npcIds) do
						local npcNumber = tonumber(anNPCId)
						if nil ~= npcNumber then
							tinsert(N.droppedBy[key], npcNumber)
							N.has[npcNumber] = N.has[npcNumber] or {}
							tinsert(N.has[npcNumber], key)
						end
					end
				end
			elseif 'H' == controlCode then
				-- the "has" codes are deprecated as we will populate the data based on "drop" codes instead
				if 2 < strlen(code) then
					local subcode = strsub(code, 2, 2)
					if ':' ~= subcode then
						local holidays = N.holiday[key]
						if nil == holidays then
							holidays = ''
						end
						N.holiday[key] = holidays .. subcode
					end
				end
			elseif 'K' == controlCode then
				if 2 < strlen(code) and ':' == strsub(code, 2, 2) then
					N.kill[key] = N.kill[key] or {}
					local questList = { strsplit(',', strsub(code, 3)) }
					for _, questId in pairs(questList) do
						tinsert(N.kill[key], tonumber(questId))
					end
				end
			elseif 'M' == controlCode then
				local t1 = { mailbox = true }
				if 7 < strlen(code) then
					t1.mapArea = tonumber(strsub(code, 8))
				end
				tinsert(N.locations[key], t1)
			elseif 'N' == controlCode then
				if 2 < strlen(code) and ':' == strsub(code, 2, 2) then
					local nameIndexToUse = tonumber(strsub(code, 3))
					N.nameIndex[key] = nameIndexToUse
				else
					local t1 = { near = true }
					if 4 < strlen(code) then
						t1.mapArea = tonumber(strsub(code, 5))
					end
					tinsert(N.locations[key], t1)
				end
			elseif 'P' == controlCode then
				-- we do nothing special for "Preowned" at the moment
			elseif 'Q' == controlCode then
				if 2 < strlen(code) and ':' == strsub(code, 2, 2) then
					N.questAssociations[key] = N.questAssociations[key] or {}
					local questList = { strsplit(',', strsub(code, 3)) }
					for _, questId in pairs(questList) do
						tinsert(N.questAssociations[key], tonumber(questId))
					end
				end
			elseif 'S' == controlCode then
				-- we do nothing special for "Self" at the moment
			elseif 'X' == controlCode then
				N.heroic[key] = true
			elseif 'Z' == controlCode then
				tinsert(N.locations[key], { ["mapArea"]=tonumber(strsub(code, 2)) })
			else	-- a real coordinate
				tinsert(N.locations[key], Grail:_LocationStructure(code))
			end
		end
	end
	if value[2] then N.comment[key] = value[2] end
	if value[3] then N.faction[key] = value[3] end

end
-- TODO: Go through all the Grail.npc.droppedBy values and make sure the locations for the NPCs are added to those keys

Grail.npcs = nil
--	18.84/19.29 idle after a couple minutes at startup without these changes.
--	18.25/18.69	idle after a couple minutes at startup WITH these changes.

Grail.memoryUsage.NPCs = gcinfo() - originalMem

-- 81152 garrison level 1: 582:46.56,54.33 539:30.46,18.28

